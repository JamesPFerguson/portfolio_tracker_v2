exit
params
exit
params
exit
@stock
exit
@first_id
@stock.id
@stock
exit
@stocks
exit
Stock.all
params
exit
params
session
data
exit
@portfolio_stock = PortfolioStock.new(portfolio_stock_params)
exit
@portfolio_stocks.length
!!@portfolio_stocks
@portfolio_stocks
exit
stock
exit
response == "Not Found"
response
exit
ticker
exit
Stock.find(p_stock.stock_id)
p_stock
p_stock.quantity
p_value
exit
Stock.all
exit
stock
exit
Stock.all
p_stock
P-stock
p_stock.quantity
p_value
exit
@portfolio_stock.methods
@portfolio_stock
exit
bool
bool = signed_in? && current_user
current_user
signed_in?
exit
User.all
session[:user_id]
session
current_user
exit
p_stock
exit
Stock.all.last
stock.id
exit
Stock.all.last
exit
stocker
stocker = stock.save
exit
tester = _
stock.save
exit
Stock.all
stock.save
exit
Stock.all
stock.save
stock.id
exit
stock.six_month_appreciation
exit
json_stock
json_stock_quote["sector"]
json_stock["sector"]
json_stock["companyName"]
json_stock_quote["sector"]
json_stock_quote["industry"]
json_stock["industry"]
json_stock["sector"]
json_stock[:sector]
json_stock[:industry]
json_stock_quote
stock.attributes.keys
stock.attributes
stock.methods
stock
exit
exut
URI("haha" + "hehe")
stock["companyName"]
stock["beta"]
stock[:companyName]
stock.companyName
stock = JSON.parse(response)
JSON.parse(response)
JSON.parse(reponse)
response = Net::HTTP.get(uri)
uri = URI(full)
full = url + "/" + ticker + "/stats"
full = uri + "/" + ticker + "/stats"
response = Net::HTTP.get(uri)
uri = URI(url)
url = "https://api.iextrading.com/1.0/stock"
exit
@portfolio_stocks
exit
!@user
@user
exit
!!@user
!@user
exit
@user
exit
@user
2user
exit
@user.save
@user
exit
@user
exit
@user
auth[:uid]
auth[:info]
auth
auth[:info][:login]
exit
@user
exit
session[:user_id]
session
exit
auth
exit
x.stock
x.portfolio_id
x = @portfolio_stocks.first
x = @portfolio_stocks.first[0]
@portfolio_stocks.first
exit
params
exit
PortfolioStock.all.first.stock
PortfolioStock.all
PortofolioStock.all
@portfolio_stock.stock
@portfolio_stock
exit
params[:portfolio_stock][:ticker]
params
exit
Stock.all
exit
params
stock
exit
Stock.all
Stock.all.clear
Stock.all.destroy
Stock.all
exit
session[:user_id]
sesssion[:user_id]
session
signed_in?
exit
stock
@portfolio_stock
exit
params
exit
stock.ticker
exit
@portfolio_stock
portfolio_stock_params[:quantity]
portfolio_stock_params
exit
@portfolio_stock.save
@portfolio_stock
exit
@portfolio_stocks
exit
stock
exit
where("pe_ratio > 0").order("pe_ratio asc").first
Scraper.scrape_ticker("GME")
Scraper.scrape_ticker("ISRG")
where("pe_ratio > 0").order("pe_ratio asc").first
where("pe_ratio > 0").order("pe_ratio: asc").first
where("pe_ratio > 0").order("pe_ratio :asc").first
order("pe_ratio: asc")
order(pe_ratio :asc)
where("pe_ratio > 0")
where("pe_ratio > 0").order(pe_ratio :asc).first
exit
self.order(pe_ratio :asc).first
order(pe_ratio :asc).first
self
exit
flash
exit
@user
flash[:notice]
flash
exit
flash[:message]
flash[:notice]
flash
User.all
params
@user
exit
User.all
params
exit
@portfolio.user
@portfolio
exit
@portfolio.user
@portfolio
exit
@portfolio = Portfolio.find_by(id: params[:id])
params
exit
params
@portfolio
exit
portfolio
portfolio.user
exit
Stock.all
next
Stock.all
Scraper.scrape_ticker("NFLX")
Scraper.scrape_ticker("NFLX)
stock.valid?
stock
Stock.all
exit
stock
exit
stock.valid?
stock
